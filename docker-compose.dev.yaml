services:
  backend:
    # build:
    #   context: ./code/backend
    #   dockerfile: Dockerfile
    container_name: ops_arch_dashboard_backend
    image: yc913344706/python:3.13_django
    expose:
      - "8000"
    volumes:
      - ./code/backend:/app
      - ./data/backend:/data/persistent
      - ./logs/backend:/var/log/backend
    env_file:
      - ./code/backend/.dev.env
    depends_on:
      db_mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    dns:
      - 223.5.5.5
      - 119.29.29.29
    command: >
      bash -c "cd /app && ./entrypoint.sh"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/demo/health/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  backend_celery:
    container_name: ops_arch_dashboard_backend_celery
    image: yc913344706/python:3.13_django
    # expose:
    #   - "8000"
    volumes:
      - ./code/backend:/app
      - ./data/backend:/data/persistent
      - ./logs/backend:/var/log/backend
    env_file:
      - ./code/backend/.dev.env
    depends_on:
      db_mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    command: >
      bash -c "
        source /etc/profile &&
        cd /app &&
        pip3 install -r requirements.txt &&
        celery -A backend worker -l info -B --logfile /var/log/backend/celery.log"
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep -q '[c]elery -A backend worker' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  frontend:
    # Docker 构建镜像时，会根据 Dockerfile 的每一步（每个指令）缓存结果。
    # 如果某一步的内容没变（比如 package.json 没变），Docker 会复用缓存，不会重新执行 npm install，也不会重新下载 node_modules。
    # 如果你修改了 package.json 或 package-lock.json，这一层的缓存失效，npm install 会重新执行，重新下载依赖。
    # build:
    #   context: ./code/frontend
    #   dockerfile: Dockerfile
    image: yc913344706/node:22-alpine-pnpm
    container_name: ops_arch_dashboard_frontend
    expose:
      - "8080"
    volumes:
      - ./code/frontend:/app
    environment:
      - NODE_ENV=development
      - NEXT_TELEMETRY_DISABLED=1
    depends_on:
      backend:
        condition: service_healthy
      backend_celery:
        condition: service_healthy
    command: >
      sh -c "
        cd /app &&
        pnpm install &&
        pnpm dev"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 20
      start_period: 60s

  nginx:
    image: nginx:alpine
    container_name: ops_arch_dashboard_nginx
    ports:
      - "8080:8080"
    volumes:
      - ./etc/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  db_mysql:
    image: mysql:8.0.39
    container_name: ops_arch_dashboard_db
    ports:
      - "3306:3306"
    restart: always
    # 容器日志大小配置
    logging:
      driver: 'json-file'
      options:
        max-size: '5g'
    environment:
      # 配置root密码
      MYSQL_ROOT_PASSWORD: Admin@123
      MYSQL_DATABASE: ops_arch_dashboard
    volumes:
      # 挂载数据目录
      - "./data/mysql/data:/var/lib/mysql" 
      # 挂载配置文件目录
      - "./data/mysql/config:/etc/mysql/conf.d" 
      # 挂载 mysql 初始化 sql 文件目录
      - "./etc/mysql/init:/docker-entrypoint-initdb.d"
    healthcheck:
      # https://blog.csdn.net/weixin_48447848/article/details/122632562
      test: ["CMD", "mysql" ,"-h", "localhost", "-P", "3306", "-u", "root", "-pAdmin@123", "-e", "SELECT 1", "ops_arch_dashboard"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s

  redis:
    # https://developer.aliyun.com/article/1293182
    image: redis:latest
    container_name: ops_arch_dashboard_redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis:/data
      - ./etc/redis.conf:/usr/local/etc/redis/redis.conf
      - ./logs/redis:/logs
    #配置文件启动
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
