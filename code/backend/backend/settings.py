"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.20.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


from lib.log import set_color_logger_level
import os

from yaml import safe_load
f2 = open(f"{BASE_DIR}/.{os.environ['OPS_ARCH_DASHBOARD_ENV']}.yaml", 'rb')
config_data = safe_load(f2.read())
f2.close()

set_color_logger_level(config_data.get('LOG_LEVEL', "DEBUG"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-y^54noti#i2kbylp8z9s^ky4#w$#0qu!2pu3#^yf1mmp553=ke'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config_data.get('SETTINGS',{}).get('DEBUG', True)


#################
# CORS相关--start
#################

ALLOWED_HOSTS = config_data.get('SETTINGS',{}).get('ALLOWED_HOSTS', [])

# 添加 CORS 配置
CORS_ORIGIN_ALLOW_ALL = True  # 设置为True即信任所有来源
# CORS_ORIGIN_ALLOW_ALL = False
# 1. 设置白名单  # 凡是出现在白名单中的域名，都可以访问后端接口
# CORS_ORIGIN_WHITELIST = (
#     'https://127.0.0.1',
#     'https://localhost',
#     'https://10.18.145.18',
#
# )

# 2. 设置 CORS Cookie
CORS_ALLOW_CREDENTIALS = True  # 指明在跨域访问中，后端是否支持对cookie的操作
CORS_ALLOW_METHODS = ['*']
CORS_ALLOW_HEADERS = ['*']
SESSION_COOKIE_SAMESITE = 'None'
SESSION_COOKIE_SECURE = False
CSRF_COOKIE_SECURE = False      # HTTPS 环境


# CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOWED_ORIGINS = config_data.get('SETTINGS',{}).get('CORS_ALLOWED_ORIGINS', [])

# https://stackoverflow.com/questions/38841109/csrf-validation-does-not-work-on-django-using-https
CSRF_TRUSTED_ORIGINS = config_data.get('SETTINGS',{}).get('CSRF_TRUSTED_ORIGINS', [])


#################
# CORS相关--finish
#################

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # https://stackoverflow.com/questions/35760943/how-can-i-enable-cors-on-django-rest-framework
    'corsheaders',  # 为解决跨域

    'apps.user',
    'apps.perm',
    'apps.audit',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # https://stackoverflow.com/questions/35760943/how-can-i-enable-cors-on-django-rest-framework
    'corsheaders.middleware.CorsMiddleware',  # 为解决跨域

    'django.middleware.common.CommonMiddleware',
    # https://zhuanlan.zhihu.com/p/335310285
    # 'django.middleware.csrf.CsrfViewMiddleware',


    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'apps.myAuth.middleware.AuthMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',  # 默认
        'NAME': config_data["MYSQL"]["DB"],  # 连接的数据库
        'HOST': config_data["MYSQL"]["HOST"],  # mysql的ip地址
        'PORT': config_data["MYSQL"]["PORT"],  # mysql的端口
        'USER': config_data["MYSQL"]["USER"],  # mysql的用户名
        'PASSWORD': config_data["MYSQL"]["PASSWORD"]  # mysql的密码
    }
}

# cache
# https://cloud.tencent.com/developer/article/2123441

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": 'redis://:{}@{}:{}/{}'.format(
            config_data['REDIS']['PASSWORD'],
            config_data['REDIS']['HOST'],
            config_data['REDIS']['PORT'],
            config_data['REDIS']['DB']['DEFAULT'],
        ),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "AUTH": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": 'redis://:{}@{}:{}/{}'.format(
            config_data['REDIS']['PASSWORD'],
            config_data['REDIS']['HOST'],
            config_data['REDIS']['PORT'],
            config_data['REDIS']['DB']['AUTH'],
        ),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
